"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";
import { Locale, getTranslation } from '@/lib/i18n';

interface PromptTemplatesProps {
  setPrompt: (prompt: string) => void;
  setActiveTab: (tab: string) => void;
  locale: Locale;
}

const PromptTemplates = ({ setPrompt, setActiveTab, locale }: PromptTemplatesProps) => {
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("all");

  const t = (key: keyof typeof import('@/lib/i18n').translations.zh) => getTranslation(locale, key);

  const categories = [
    { id: "all", label: locale === 'zh' ? "ÂÖ®ÈÉ®" : "All", icon: "üåü" },
    { id: "portrait", label: locale === 'zh' ? "‰∫∫ÂÉè" : "Portrait", icon: "üë§" },
    { id: "landscape", label: locale === 'zh' ? "È£éÊôØ" : "Landscape", icon: "üèûÔ∏è" },
    { id: "anime", label: locale === 'zh' ? "Âä®Êº´" : "Anime", icon: "üå∏" },
    { id: "art", label: locale === 'zh' ? "Ëâ∫ÊúØ" : "Art", icon: "üé®" },
    { id: "fantasy", label: locale === 'zh' ? "Â•áÂπª" : "Fantasy", icon: "üßô" },
    { id: "sci-fi", label: locale === 'zh' ? "ÁßëÂπª" : "Sci-Fi", icon: "üöÄ" },
    { id: "architecture", label: locale === 'zh' ? "Âª∫Á≠ë" : "Architecture", icon: "üèõÔ∏è" },
  ];

  const templates = [
    {
      id: 1,
      category: "portrait",
      title: locale === 'zh' ? "‰∏ì‰∏ö‰∫∫ÂÉèÊëÑÂΩ±" : "Professional Portrait",
      prompt: locale === 'zh' 
        ? "‰∏ì‰∏ö‰∫∫ÂÉèÊëÑÂΩ±ÔºåÊüîÂíåÂÖâÁ∫øÔºåÊµÖÊôØÊ∑±ÔºåÈ´òË¥®ÈáèÔºå8KÂàÜËæ®ÁéáÔºåÂÆåÁæéÊûÑÂõæ"
        : "Professional portrait photography, soft lighting, shallow depth of field, high quality, 8K resolution, perfect composition",
      tags: ["portrait", "professional", "photography"],
      difficulty: "beginner",
      likes: 245
    },
    {
      id: 2,
      category: "landscape",
      title: locale === 'zh' ? "Â£Æ‰∏ΩÂ±±Ê∞¥È£éÊôØ" : "Majestic Mountain Landscape",
      prompt: locale === 'zh'
        ? "Â£Æ‰∏ΩÁöÑÂ±±ËÑâÈ£éÊôØÔºåÊó•Âá∫Êó∂ÂàÜÔºå‰∫ëÈõæÁº≠ÁªïÔºåË∂ÖÈ´òÊ∏ÖÔºåËá™ÁÑ∂ÂÖâÁ∫øÔºåÈ£éÊôØÊëÑÂΩ±Êù∞‰Ωú"
        : "Majestic mountain landscape, sunrise, misty clouds, ultra HD, natural lighting, landscape photography masterpiece",
      tags: ["landscape", "nature", "mountains"],
      difficulty: "beginner",
      likes: 189
    },
    {
      id: 3,
      category: "anime",
      title: locale === 'zh' ? "ÂèØÁà±Âä®Êº´ËßíËâ≤" : "Cute Anime Character",
      prompt: locale === 'zh'
        ? "ÂèØÁà±ÁöÑÂä®Êº´Â•≥Â≠©ÔºåÂ§ßÁúºÁùõÔºåÂΩ©Ëâ≤Â§¥ÂèëÔºåÊó•ÂºèÂä®ÁîªÈ£éÊ†ºÔºåÈ´òË¥®ÈáèÔºåÁªÜËäÇ‰∏∞ÂØå"
        : "Cute anime girl, big eyes, colorful hair, Japanese animation style, high quality, detailed",
      tags: ["anime", "character", "cute"],
      difficulty: "intermediate",
      likes: 312
    },
    {
      id: 4,
      category: "art",
      title: locale === 'zh' ? "Âè§ÂÖ∏Ê≤πÁîªÈ£éÊ†º" : "Classical Oil Painting",
      prompt: locale === 'zh'
        ? "Âè§ÂÖ∏Ê≤πÁîªÈ£éÊ†ºÔºåÂéöÈáçÁ¨îËß¶Ôºå‰∏∞ÂØåËâ≤ÂΩ©ÔºåËâ∫ÊúØÂ§ßÂ∏à‰ΩúÂìÅÔºåÂçöÁâ©È¶ÜÁ∫ßÂà´Ë¥®Èáè"
        : "Classical oil painting style, thick brushstrokes, rich colors, masterpiece artwork, museum quality",
      tags: ["art", "painting", "classical"],
      difficulty: "advanced",
      likes: 156
    },
    {
      id: 5,
      category: "fantasy",
      title: locale === 'zh' ? "Á•ûÁßòÂ•áÂπªÂüéÂ†°" : "Mystical Fantasy Castle",
      prompt: locale === 'zh'
        ? "Á•ûÁßòÁöÑÂ•áÂπªÂüéÂ†°ÔºåÈ≠îÊ≥ïÂÖâËäíÔºå‰∫ëÁ´Ø‰πã‰∏äÔºåÊ¢¶ÂπªËâ≤ÂΩ©ÔºåÂè≤ËØóÁ∫ßÂú∫ÊôØ"
        : "Mystical fantasy castle, magical glow, above the clouds, dreamy colors, epic scene",
      tags: ["fantasy", "castle", "magical"],
      difficulty: "intermediate",
      likes: 278
    },
    {
      id: 6,
      category: "art",
      title: locale === 'zh' ? "Ê∞¥ÂΩ©ÁîªËâ∫ÊúØ" : "Watercolor Art",
      prompt: locale === 'zh'
        ? "Ê∞¥ÂΩ©ÁîªÈ£éÊ†ºÔºåÊüîÂíåËâ≤ÂΩ©ÔºåÊµÅÂä®Á¨îËß¶ÔºåËâ∫ÊúØÊÑüÂº∫ÔºåÈÄèÊòéË¥®ÊÑüÔºåÁ∫∏Ë¥®Á∫πÁêÜ"
        : "Watercolor painting style, soft colors, flowing brushstrokes, artistic, transparent texture, paper texture",
      tags: ["art", "watercolor", "soft"],
      difficulty: "intermediate",
      likes: 134
    },
    {
      id: 7,
      category: "landscape",
      title: locale === 'zh' ? "Ê¢¶ÂπªÊµ∑ËæπÊó•ËêΩ" : "Dreamy Beach Sunset",
      prompt: locale === 'zh'
        ? "Áæé‰∏ΩÁöÑÊµ∑ËæπÊó•ËêΩÔºåÈáëËâ≤Â§©Á©∫ÔºåÊ≥¢Êµ™ËΩªÊãçÔºåÂÆÅÈùôÁ••ÂíåÔºåÊöñËâ≤Ë∞ÉÔºåÊµ™Êº´Ê∞õÂõ¥"
        : "Beautiful beach sunset, golden sky, gentle waves, peaceful and serene, warm tones, romantic atmosphere",
      tags: ["landscape", "sunset", "beach"],
      difficulty: "beginner",
      likes: 201
    },
    {
      id: 8,
      category: "fantasy",
      title: locale === 'zh' ? "Âè≤ËØóÈæô‰∏éÈ™ëÂ£´" : "Epic Dragon and Knight",
      prompt: locale === 'zh'
        ? "ÂãáÊï¢ÁöÑÈ™ëÂ£´Èù¢ÂØπÂ∑®ÈæôÔºåÂè≤ËØóËà¨ÁöÑÊàòÊñóÂú∫Èù¢ÔºåÊàèÂâßÊÄßÂÖâÁ∫øÔºå‰∏≠‰∏ñÁ∫™È£éÊ†º"
        : "Brave knight facing a dragon, epic battle scene, dramatic lighting, medieval style",
      tags: ["fantasy", "dragon", "knight", "epic"],
      difficulty: "advanced",
      likes: 167
    },
    {
      id: 9,
      category: "sci-fi",
      title: locale === 'zh' ? "Êú™Êù•ÁßëÂπªÂüéÂ∏Ç" : "Futuristic Sci-Fi City",
      prompt: locale === 'zh'
        ? "Êú™Êù•ÁßëÂπªÂüéÂ∏ÇÔºåÈúìËôπÁÅØÂÖâÔºåÈ£ûË°åÊ±ΩËΩ¶ÔºåÊë©Â§©Â§ßÊ•ºÔºåËµõÂçöÊúãÂÖãÈ£éÊ†ºÔºåÂ§úÊôØ"
        : "Futuristic sci-fi city, neon lights, flying cars, skyscrapers, cyberpunk style, night scene",
      tags: ["sci-fi", "city", "cyberpunk"],
      difficulty: "intermediate",
      likes: 289
    },
    {
      id: 10,
      category: "architecture",
      title: locale === 'zh' ? "Áé∞‰ª£Âª∫Á≠ëËÆæËÆ°" : "Modern Architecture Design",
      prompt: locale === 'zh'
        ? "Áé∞‰ª£Âª∫Á≠ëËÆæËÆ°ÔºåÁÆÄÁ∫¶È£éÊ†ºÔºåÁéªÁíÉÂπïÂ¢ôÔºåÂá†‰ΩïÂΩ¢Áä∂ÔºåÂª∫Á≠ëÊëÑÂΩ±Ôºå‰∏ì‰∏öÁÖßÊòé"
        : "Modern architecture design, minimalist style, glass facade, geometric shapes, architectural photography, professional lighting",
      tags: ["architecture", "modern", "design"],
      difficulty: "intermediate",
      likes: 98
    },
    {
      id: 11,
      category: "portrait",
      title: locale === 'zh' ? "Êó∂Â∞öËÇñÂÉèÊëÑÂΩ±" : "Fashion Portrait Photography",
      prompt: locale === 'zh'
        ? "Êó∂Â∞öËÇñÂÉèÊëÑÂΩ±Ôºå‰∏ì‰∏öÊ®°ÁâπÔºåÊó∂Â∞öÈÄ†ÂûãÔºåÂ∑•‰ΩúÂÆ§ÁÅØÂÖâÔºåÈ´òÁ´ØÊó∂Â∞öÊùÇÂøóÈ£éÊ†º"
        : "Fashion portrait photography, professional model, stylish makeup, studio lighting, high-end fashion magazine style",
      tags: ["portrait", "fashion", "studio"],
      difficulty: "advanced",
      likes: 223
    },
    {
      id: 12,
      category: "anime",
      title: locale === 'zh' ? "Êú∫Áî≤Âä®Êº´È£éÊ†º" : "Mecha Anime Style",
      prompt: locale === 'zh'
        ? "Êú∫Áî≤Âä®Êº´È£éÊ†ºÔºåÂ∑®ÂûãÊú∫Âô®‰∫∫ÔºåÊú™Êù•ÊàòÂ£´ÔºåÂä®‰ΩúÂú∫Èù¢ÔºåÊó•ÂºèÊú∫Áî≤ËÆæËÆ°"
        : "Mecha anime style, giant robot, futuristic warrior, action scene, Japanese mecha design",
      tags: ["anime", "mecha", "robot"],
      difficulty: "advanced",
      likes: 176
    }
  ];

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner': return 'bg-green-500/20 text-green-400';
      case 'intermediate': return 'bg-yellow-500/20 text-yellow-400';
      case 'advanced': return 'bg-red-500/20 text-red-400';
      default: return 'bg-gray-500/20 text-gray-400';
    }
  };

  const getDifficultyLabel = (difficulty: string) => {
    switch (difficulty) {
      case 'beginner': return locale === 'zh' ? 'ÂàùÁ∫ß' : 'Beginner';
      case 'intermediate': return locale === 'zh' ? '‰∏≠Á∫ß' : 'Intermediate';
      case 'advanced': return locale === 'zh' ? 'È´òÁ∫ß' : 'Advanced';
      default: return difficulty;
    }
  };

  const filteredTemplates = templates.filter(template => {
    const matchesCategory = selectedCategory === "all" || template.category === selectedCategory;
    const matchesSearch = template.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         template.prompt.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         template.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));
    return matchesCategory && matchesSearch;
  });

  const sortedTemplates = filteredTemplates.sort((a, b) => b.likes - a.likes);

  const handleUseTemplate = (template: typeof templates[0]) => {
    setPrompt(template.prompt);
    setActiveTab('text-to-image');
    toast.success(t('templateApplied'));
  };

  const handleCopyTemplate = async (template: typeof templates[0]) => {
    try {
      await navigator.clipboard.writeText(template.prompt);
      toast.success(t('promptCopied'));
    } catch (error) {
      // Fallback for browsers that don't support clipboard API
      const textArea = document.createElement('textarea');
      textArea.value = template.prompt;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      toast.success(t('promptCopied'));
    }
  };

  return (
    <div className="w-full max-w-7xl mx-auto p-4 sm:p-6 bg-card/50 backdrop-blur-sm rounded-xl border border-border">
      <div className="space-y-6">
        {/* Header */}
        <div className="text-center space-y-3">
          <h2 className="text-2xl font-bold flex items-center justify-center gap-2">
            <span>üìù</span>
            {t('promptTemplates')}
          </h2>
          <p className="text-muted-foreground max-w-2xl mx-auto">
            {t('templatesDescription')}
          </p>
          <div className="flex items-center justify-center gap-4 text-sm text-muted-foreground">
            <span className="flex items-center gap-1">
              <span>üìä</span>
              {locale === 'zh' ? `${templates.length} ‰∏™Ê®°Êùø` : `${templates.length} templates`}
            </span>
            <span className="flex items-center gap-1">
              <span>‚ù§Ô∏è</span>
              {locale === 'zh' ? `${templates.reduce((sum, t) => sum + t.likes, 0)} Ê¨°‰ΩøÁî®` : `${templates.reduce((sum, t) => sum + t.likes, 0)} uses`}
            </span>
          </div>
        </div>

        {/* Search and Filter */}
        <div className="space-y-4">
          <div className="relative max-w-md mx-auto">
            <input
              placeholder={t('searchTemplates')}
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="flex h-12 w-full rounded-lg border border-input bg-background pl-10 pr-4 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
            />
            <div className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground">
              üîç
            </div>
          </div>
          
          <div className="flex flex-wrap justify-center gap-2">
            {categories.map((category) => (
              <Button
                key={category.id}
                onClick={() => setSelectedCategory(category.id)}
                variant={selectedCategory === category.id ? "default" : "outline"}
                size="sm"
                className="flex items-center gap-2"
              >
                <span>{category.icon}</span>
                {category.label}
              </Button>
            ))}
          </div>
        </div>

        {/* Templates Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
          {sortedTemplates.map((template) => (
            <div
              key={template.id}
              className="p-4 bg-background/50 rounded-lg border border-border hover:border-primary/50 transition-all duration-200 hover:shadow-lg group"
            >
              <div className="space-y-3">
                <div className="flex items-start justify-between">
                  <h3 className="font-semibold text-sm leading-tight">{template.title}</h3>
                  <div className="flex items-center gap-1 text-xs text-muted-foreground">
                    <span>‚ù§Ô∏è</span>
                    <span>{template.likes}</span>
                  </div>
                </div>
                
                <div className="flex items-center gap-2">
                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getDifficultyColor(template.difficulty)}`}>
                    {getDifficultyLabel(template.difficulty)}
                  </span>
                  <span className="px-2 py-1 bg-secondary/50 text-xs rounded-full">
                    {categories.find(c => c.id === template.category)?.icon}
                    {categories.find(c => c.id === template.category)?.label}
                  </span>
                </div>
                
                <p className="text-sm text-muted-foreground line-clamp-3 leading-relaxed">
                  {template.prompt}
                </p>
                
                <div className="flex flex-wrap gap-1">
                  {template.tags.slice(0, 3).map((tag) => (
                    <span
                      key={tag}
                      className="px-2 py-1 bg-muted/50 text-xs rounded-full"
                    >
                      #{tag}
                    </span>
                  ))}
                  {template.tags.length > 3 && (
                    <span className="px-2 py-1 bg-muted/50 text-xs rounded-full">
                      +{template.tags.length - 3}
                    </span>
                  )}
                </div>
                
                <div className="flex gap-2 pt-2">
                  <Button
                    onClick={() => handleUseTemplate(template)}
                    size="sm"
                    className="flex-1 text-xs"
                  >
                    <span className="mr-1">‚ú®</span>
                    {t('useTemplate')}
                  </Button>
                  <Button
                    onClick={() => handleCopyTemplate(template)}
                    variant="outline"
                    size="sm"
                    className="px-3"
                  >
                    üìã
                  </Button>
                </div>
              </div>
            </div>
          ))}
        </div>

        {sortedTemplates.length === 0 && (
          <div className="text-center py-12">
            <div className="text-4xl mb-4">üîç</div>
            <p className="text-muted-foreground mb-4">
              {locale === 'zh' ? 'Ê≤°ÊúâÊâæÂà∞ÂåπÈÖçÁöÑÊ®°Êùø' : 'No matching templates found'}
            </p>
            <Button 
              onClick={() => {
                setSearchTerm("");
                setSelectedCategory("all");
              }} 
              variant="outline"
            >
              {locale === 'zh' ? 'ÈáçÁΩÆÁ≠õÈÄâ' : 'Reset Filters'}
            </Button>
          </div>
        )}

        {/* Tips Section */}
        <div className="bg-muted/30 rounded-lg p-4 space-y-3">
          <h4 className="text-sm font-medium flex items-center gap-2">
            <span>üí°</span>
            {locale === 'zh' ? '‰ΩøÁî®ÊäÄÂ∑ß' : 'Pro Tips'}
          </h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-xs text-muted-foreground">
            <div className="space-y-1">
              <p>‚Ä¢ {locale === 'zh' ? 'ÂèØ‰ª•‰øÆÊîπÊ®°Êùø‰∏≠ÁöÑÂÖ≥ÈîÆËØçÊù•‰∏™ÊÄßÂåñ' : 'Modify keywords in templates for personalization'}</p>
              <p>‚Ä¢ {locale === 'zh' ? 'ÁªÑÂêàÂ§ö‰∏™Ê®°ÊùøÁöÑÂÖÉÁ¥†ÂàõÈÄ†Áã¨ÁâπÊïàÊûú' : 'Combine elements from multiple templates'}</p>
            </div>
            <div className="space-y-1">
              <p>‚Ä¢ {locale === 'zh' ? 'ÂàùÁ∫ßÊ®°ÊùøÈÄÇÂêàÊñ∞ÊâãÂø´ÈÄü‰∏äÊâã' : 'Beginner templates are perfect for quick starts'}</p>
              <p>‚Ä¢ {locale === 'zh' ? 'È´òÁ∫ßÊ®°ÊùøÂåÖÂê´Êõ¥Â§ö‰∏ì‰∏öÊúØËØ≠' : 'Advanced templates include professional terminology'}</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PromptTemplates; 
